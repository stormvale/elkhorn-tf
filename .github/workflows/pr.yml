name: infra

on:
  pull_request:
    branches:
      - main
    paths:
      - 'development/**'
      - 'production/**'
      - 'modules/**'
  workflow_dispatch:

permissions:
  id-token: write # needed to POST to Github Actions Token Service
  issues: write
  pull-requests: write # needed to write plan changes to PR
  security-events: write # Needed to upload chekov scan results
  contents: read # needed to clone repo

jobs:
  plan:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        environment: [development, production]

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
      
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.12.2'

      # Log into Azure with OIDC integration. (requires federated credentials on the App Registration in Azure.)
      - name: 'Azure login'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      # Run az commands to confirm sub access
      - name: 'Az account show'
        run: az account show

      # Add a network access rule to the storage account since it is private and only allows access from specific IPs.
      - name: Whitelist GitHub Runner IP
        uses: azure/CLI@v1
        with:
          inlineScript: |
            set -eu
            agentIP=$(curl -s https://api.ipify.org/)
            az storage account network-rule add \
              --resource-group "${{ secrets.TF_RESOURCE_GROUP_NAME }}" \
              --account-name "${{ secrets.TF_STORAGE_ACCOUNT_NAME }}" \
              --ip-address $agentIP
            sleep 30

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        env:
          RESOURCE_GROUP_NAME: ${{ secrets.TF_RESOURCE_GROUP_NAME }}
          STORAGE_ACCOUNT: ${{ secrets.TF_STORAGE_ACCOUNT_NAME }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: >
          cd ${{ matrix.environment }} &&
          terraform init -force-copy
          -backend-config="resource_group_name=$RESOURCE_GROUP_NAME"
          -backend-config="storage_account_name=$STORAGE_ACCOUNT"
          -backend-config="container_name=tfstate"

      # Run a Terraform fmt
      - name: Terraform format
        id: fmt
        run: |
          cd ${{ matrix.environment }}
          terraform fmt -check -recursive
  
      # Run a Terraform validate
      - name: Terraform Validate
        id: validate
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          cd ${{ matrix.environment }}
          terraform validate -no-color

      # Perform a security scan of the terraform code using checkov
      - name: Run Checkov action
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ matrix.environment }}/
          output_file_path: results/${{ matrix.environment }}.sarif
          framework: terraform
          soft_fail: true

      # Upload results to GitHub Advanced Security
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results
          category: checkov

      # Run a Terraform plan
      - name: Terraform plan
        id: plan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_registry_username: ${{ github.actor }}
        run: |
          cd ${{ matrix.environment }}
          terraform plan -no-color -out=${{ matrix.environment }}.tfplan -detailed-exitcode

      # Remove the GitHub runner IP from the storage account firewall rules to prevent unauthorized access.
      - name: Remove GitHub Runner IP from Whitelist
        if: always()
        uses: azure/CLI@v1
        with:
          inlineScript: |
            set -eu
            agentIP=$(curl -s https://api.ipify.org/)
            az storage account network-rule remove  \
              --resource-group "${{ secrets.TF_RESOURCE_GROUP_NAME }}" \
              --account-name "${{ secrets.TF_STORAGE_ACCOUNT_NAME }}" \
              --ip-address $agentIP

      # Create/update a pull request comment with the Terraform plan output
      - name: Post PR comment
        uses: borchero/terraform-plan-comment@v2
        if: github.event_name == 'pull_request'
        with:
          token: ${{ github.token }}
          working-directory: ${{ matrix.environment }}
          header: 'Terraform Plan: ${{ matrix.environment }}'
          planfile: ${{ matrix.environment }}.tfplan

      # Upload the Terraform plan as an artifact for later use in the apply job
      - name: Upload Terraform plan
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.environment }}.tfplan
          path: ${{ matrix.environment }}/${{ matrix.environment }}.tfplan
          retention-days: 3

      - name: Display plan outputs
        id: plan_outputs
        run: |
          exitcode="${{ steps.plan.outputs.exitcode }}"
          echo "exitcode_${{ matrix.environment }}=${exitcode}" >> "$GITHUB_OUTPUT"

    outputs: # github does not yet fully support matix outputs :-/
      developmentHasChanges: ${{ matrix.environment == 'development' && steps.plan.outputs.exitcode == 2 }} # 2 = succeeded with non-empty diff
      productionHasChanges: ${{ matrix.environment == 'production' && steps.plan.outputs.exitcode == 2 }}

  # temp job to just output the plan results
  show-plan-results:
    runs-on: ubuntu-latest
    needs: [ plan ]
    steps:
      - run: echo '${{ toJSON(needs.plan.outputs) }}'


  approval:
    runs-on: ubuntu-latest
    name: Manual Approval
    needs: [ plan ]
    environment: production
    if: success() # Only proceed if plan job succeeds

    steps:
      - name: Wait for Manual Approval
        run: echo "Approve this step in GitHub Environments before proceeding."

    outputs: # need to pass the outputs along
      developmentHasChanges: ${{ needs.plan.outputs.developmentHasChanges }}
      productionHasChanges: ${{ needs.plan.outputs.productionHasChanges }}


  apply:
    runs-on: ubuntu-latest
    needs: [ approval ]

    strategy:
      matrix:
        environment: [development, production]

    environment: ${{ matrix.environment }}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Download Terraform plan artifact from the previous job. If this doesn't exist we should fail early.
      - name: Download Terraform Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.environment }}.tfplan
          path: ${{ matrix.environment }} # keep the plan in the environment directory

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Log into Azure with OIDC integration. (requires federated credentials on the App Registration in Azure.)
      - name: 'Azure login'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Run az commands to confirm sub access
      - name: 'Az account show'
        run: az account show

      # Add a network access rule to the storage account since it is private and only allows access from specific IPs.
      - name: Whitelist GitHub Runner IP
        uses: azure/CLI@v1
        with:
          inlineScript: |
            set -eu
            agentIP=$(curl -s https://api.ipify.org/)
            az storage account network-rule add \
              --resource-group "${{ secrets.TF_RESOURCE_GROUP_NAME }}" \
              --account-name "${{ secrets.TF_STORAGE_ACCOUNT_NAME }}" \
              --ip-address $agentIP
            sleep 30

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        id: init
        env:
          RESOURCE_GROUP_NAME: ${{ secrets.TF_RESOURCE_GROUP_NAME }}
          STORAGE_ACCOUNT: ${{ secrets.TF_STORAGE_ACCOUNT_NAME }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: >
          cd ${{ matrix.environment }} &&
          terraform init -force-copy
          -backend-config="resource_group_name=$RESOURCE_GROUP_NAME"
          -backend-config="storage_account_name=$STORAGE_ACCOUNT"
          -backend-config="container_name=tfstate"

      # Run a Terraform apply (only if there are changes for the environment)
      - name: Terraform Apply
        id: apply
        if: |
          (matrix.environment == 'development' && needs.approval.outputs.developmentHasChanges == 'true') ||
          (matrix.environment == 'production' && needs.approval.outputs.productionHasChanges == 'true')
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          cd ${{ matrix.environment }}
          terraform apply -no-color ${{ matrix.environment }}.tfplan

      # Remove the GitHub runner IP from the storage account firewall rules to prevent unauthorized access.
      - name: Remove GitHub Runner IP from Whitelist
        if: always()
        uses: azure/CLI@v1
        with:
          inlineScript: |
            set -eu
            agentIP=$(curl -s https://api.ipify.org/)
            az storage account network-rule remove  \
              --resource-group "${{ secrets.TF_RESOURCE_GROUP_NAME }}" \
              --account-name "${{ secrets.TF_STORAGE_ACCOUNT_NAME }}" \
              --ip-address $agentIP
