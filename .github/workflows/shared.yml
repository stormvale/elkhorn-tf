name: Shared Resources

on:
  pull_request:
    branches: [main]
    paths: ['shared/**']
  workflow_dispatch:

permissions:
  id-token: write # needed to POST to Github Actions Token Service?
  issues: write
  pull-requests: write # needed to write plan changes to PR
  security-events: write # Needed to upload chekov scan results
  contents: read # needed to clone repo

jobs:
  plan:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
      
      # Install the Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Log into Azure with OIDC integration. (requires federated credentials on the App Registration in Azure.)
      - name: 'Azure login'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      # Run az commands to confirm sub access
      - name: 'Az account show'
        run: az account show

      # Add a network access rule to the storage account since it is private and only allows access from specific IPs.
      - name: Whitelist GitHub Runner IP
        uses: azure/CLI@v1
        with:
          inlineScript: |
            set -eu
            agentIP=$(curl -s https://api.ipify.org/)
            az storage account network-rule add \
              --resource-group "${{ secrets.TF_RESOURCE_GROUP_NAME }}" \
              --account-name "${{ secrets.TF_STORAGE_ACCOUNT_NAME }}" \
              --ip-address $agentIP
            sleep 30

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform init
        id: init
        env:
          RESOURCE_GROUP_NAME: ${{ secrets.TF_RESOURCE_GROUP_NAME }}
          STORAGE_ACCOUNT: ${{ secrets.TF_STORAGE_ACCOUNT_NAME }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: >
          cd shared &&
          terraform init -force-copy
          -backend-config="resource_group_name=$RESOURCE_GROUP_NAME"
          -backend-config="storage_account_name=$STORAGE_ACCOUNT"
          -backend-config="container_name=tfstate"

      # Run a Terraform fmt
      - name: Terraform format
        id: fmt
        run: |
          cd shared
          terraform fmt -check -recursive
  
      # Run a Terraform validate
      - name: Terraform validate
        id: validate
        run: |
          cd shared
          terraform validate -no-color

      # Perform a security scan of the terraform code using checkov
      - name: Run Checkov action
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: shared/
          output_file_path: results/shared.sarif
          framework: terraform
          soft_fail: true

      # Upload results to GitHub Advanced Security
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results
          category: checkov

      # Run a Terraform plan
      - name: Terraform plan
        id: plan
        env:
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_resource_group_name: ${{ secrets.TF_RESOURCE_GROUP_NAME }}
          TF_VAR_github_pat: ${{ secrets.TF_GITHUB_PAT }} # requires 'read:packages'
        run: |
          cd shared &&
          terraform plan -no-color -out=shared.tfplan -detailed-exitcode

      # Log the plan output. 0 = no changes, 1 = error, 2 = changes
      - name: Show plan output
        id: plan_outputs
        run: exitcode="${{ steps.plan.outputs.exitcode }}"

      # Remove the GitHub runner IP from the storage account firewall rules to prevent unauthorized access.
      - name: Remove GitHub Runner IP from Whitelist
        if: always()
        uses: azure/CLI@v1
        with:
          inlineScript: |
            set -eu
            agentIP=$(curl -s https://api.ipify.org/)
            az storage account network-rule remove \
              --resource-group "${{ secrets.TF_RESOURCE_GROUP_NAME }}" \
              --account-name "${{ secrets.TF_STORAGE_ACCOUNT_NAME }}" \
              --ip-address $agentIP

      # Create/update a pull request comment with the Terraform plan output
      - name: Post PR comment
        uses: borchero/terraform-plan-comment@v2
        if: github.event_name == 'pull_request'
        with:
          token: ${{ github.token }}
          working-directory: shared
          header: 'Terraform Plan: shared'
          planfile: shared.tfplan

      # Upload the Terraform plan as an artifact for later use in the apply job
      - name: Upload Terraform plan
        uses: actions/upload-artifact@v4
        with:
          name: shared.tfplan
          path: shared/shared.tfplan
          retention-days: 3

    outputs:
      exitcode: ${{ steps.plan.outputs.exitcode }}

  apply:
    runs-on: ubuntu-latest
    needs: plan
    if: needs.plan.outputs.exitcode == 2
    environment: production

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Download Terraform plan artifact from the previous job. If this doesn't exist we should fail early.
      - name: Download Terraform Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: shared.tfplan
          path: shared # keep the plan in the environment directory

      # Install the Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.12.2'

      # Log into Azure with OIDC integration. (requires federated credentials on the App Registration in Azure.)
      - name: 'Azure login'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Run az commands to confirm sub access
      - name: 'Az account show'
        run: az account show

      # Add a network access rule to the storage account since it is private and only allows access from specific IPs.
      - name: Whitelist GitHub Runner IP
        uses: azure/CLI@v1
        with:
          inlineScript: |
            set -eu
            agentIP=$(curl -s https://api.ipify.org/)
            az storage account network-rule add \
              --resource-group "${{ secrets.TF_RESOURCE_GROUP_NAME }}" \
              --account-name "${{ secrets.TF_STORAGE_ACCOUNT_NAME }}" \
              --ip-address $agentIP
            sleep 30

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform init
        id: init
        env:
          RESOURCE_GROUP_NAME: ${{ secrets.TF_RESOURCE_GROUP_NAME }}
          STORAGE_ACCOUNT: ${{ secrets.TF_STORAGE_ACCOUNT_NAME }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: >
          cd shared &&
          terraform init -force-copy
          -backend-config="resource_group_name=$RESOURCE_GROUP_NAME"
          -backend-config="storage_account_name=$STORAGE_ACCOUNT"
          -backend-config="container_name=tfstate"

      # Run a Terraform apply for the generated plan
      - name: Terraform Apply
        id: apply
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }} # required by azurerm provider
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        run: |
          cd shared
          terraform apply -no-color shared.tfplan

      # Remove the GitHub runner IP from the storage account firewall rules to prevent unauthorized access.
      - name: Remove GitHub Runner IP from Whitelist
        if: always()
        uses: azure/CLI@v1
        with:
          inlineScript: |
            set -eu
            agentIP=$(curl -s https://api.ipify.org/)
            az storage account network-rule remove  \
              --resource-group "${{ secrets.TF_RESOURCE_GROUP_NAME }}" \
              --account-name "${{ secrets.TF_STORAGE_ACCOUNT_NAME }}" \
              --ip-address $agentIP
